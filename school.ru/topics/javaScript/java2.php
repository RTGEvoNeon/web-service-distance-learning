<html>
<title>Система дистанционного обучения кафедры </title>
<head bodycolor="000011">
 <link rel="stylesheet" type="text/css" href="../../css/style.css">
 <link rel="stylesheet" type="text/css" href="../../css/abc.css">
        <body BACKGROUND="../../image/background.PNG">
		<br><br>
		<?php
include "../../common/verch.php";
                                   
?>
<a name="33333"></a>
<h1 style="margin-bottom: 10px; color: #445C4C">Лекции по теме: JavaScript<h1>
<table align="center" cellspacing="0" cellpadding="0" border="0">
	<tr>
		<td colspan="2" align="center">
			<ul class="tab">
			<li><a href="java1.php"><span>Лекция № 1</span></a></li>
			<li><a href="java2.php"><span>Лекция № 2</span></a></li>
			<li><a href="java3.php"><span>Лекция № 3</span></a></li>
			<li><a href="java4.php"><span>Лекция № 4</span></a></li>
		</td>
	</tr>
</table>


<table align="justify" width="900" cellspacing="2" cellpadding="2" border="0" bgcolor="white">
<tr>
<td colspan="2" align="center"><br>

<strong><h2>Лекция № 2</h2> </strong><br><br><hr><br><br>


<p> <div align="left" align="justify">&nbsp;&nbsp;&nbsp;&nbsp;

<center>
<p><a class="a1" href="#0">Типы и значения в JS</a></p><br>
<p><a class="a1" href="#1">Переменная в JS</a></p><br>
<p><a class="a1" href="#2">Операции - арифметические, логические</a></p><br>
<p><a class="a1" href="#3">Операторы - циклы, сравнения. Ветвление программ</a></p>
<br></center>


&nbsp;&nbsp;&nbsp;&nbsp;Перед тем как идти дальше в изучении языка, стоит разобрать, как же конкретно работает  ваша программа и как она устроена.</p><br>

<p>Если не считать «обертку» из html-кода, то ее текст будет вот таким: </p><br>

<pre>
	&lt;script language="javascript"&gt; 
		alert("Здесь был JavaScript");
	&lt;/script&gt; 
</pre>

<p>Рассмотрим этот текст построчно. </p><br>
<p>Строка  </p><br>
<p>        <span class="T1">&lt;script language="javascript"</span>&gt; </p><br>

<p>говорит браузеру о том, что все что находится дальше (то есть, до закрытия тэга) будет скриптом. Причем скрипт будет написан на языке <span class="T1">JavaScript</span>. </p><br>
<p>Вообще, язык часто не указывается, и по умолчанию большинство браузеров считает, что это будет именно <span class="T1">Javascript</span>, но скрипты также могут быть написаны на языке <span class="T1">VisualBasic</span>, <span class="T1">Tcl</span>, <span class="T1">PerlScript</span> &mdash; в общем, на любом встраиваемом языке, который поддерживается браузером.</p><br>
<p>Для того же, чтобы браузер был уверен в языке скрипта, этот язык явно указывается в теге.  </p><br>

<p>По правде говоря, указание языка в виде <span class="T1">language="LanguageName"</span> считается устаревшей, и вместо нее рекомендуется использовать, например, такое объявление скрипта:</p><br>
<pre>
	&lt;script type="text/javascript"&gt;
</pre>
<p>То есть вместо объявления языка указывается MIME-тип содержимого тега. </p><br>

<p>Следующая строка &mdash;  </p><br>

<pre>
	alert("Здесь был JavaScript");
</pre>
<p>&mdash; собственно, и есть сам скрипт. Пока что это одна команда &mdash; вызов встроенной функции <span class="T1">alert()</span>. Эта функция поддерживается всеми браузерами, хотя каждый браузер реагирует на нее по-своему. Так, браузер <span class="T1">Opera</span>, например, обязательно кроме самого текста выводит еще и URL сайта, который вызвал открытие окна уведомления, и еще немного дополнительной информации. <span class="T1">Internet Explorer</span> выводит окно уведомления с заголовком «Internet Explorer», а <span class="T1">Mozilla Firefox</span> &mdash; с заголовком «Javascript application».</p><br>

<p>Это простейший пример того, о чем было сказано в первой главе &mdash; а именно, различиям в выполнении одного и того же кода. </p><br>

<p>Подробнее о функциях я расскажу в следующей главе, а сейчас главное понять, что такая запись позволяет выполнять какое-либо действие (какое &mdash; зависит от функции), причем действие будет зависеть от того, что находится внутри скобок.  </p><br>
<p>Если бы в скобках стояла строка "Здесь не было JavaScript" (что, конечно, было бы неправдой) &mdash; то браузер показал бы окно с надписью «Здесь не было Javascript». </p><br>

<p>Третья строка скрипта &mdash; <span class="T1">&lt;/script&gt;</span></p><br>

<p>Это обыкновенный закрывающий тег, ничем не отличающийся от других закрывающих тегов HTML. Он говорит браузеру, что скрипт закончился, и дальше будут идти другие теги языка HTML. </p><br>

<p>В предыдущей главе упоминались два способа подключения скрипта. </p><br>
<p>Первый способ мы только что разобрали буквально по строчке. Второй мало чем от него отличается, кроме того, что самого скрипта в HTML-документе не будет. </p><br>

<p>Этот скрипт будет где-нибудь в отдельном файле, например, в файле <span class="T1">script.js</span>, находящимся рядом с главным HTML-скриптом.</p><br>
<p>Для того чтобы браузер знал, где лежит этот скрипт, нужно написать, например, такой код: </p><br>
<pre>
	&lt;script type="text/javascript" src="script.js"&gt;&lt;/script&gt; 

</pre>
<p>Здесь внутри тегов <span class="T1">&lt;script&gt;</span> пусто, а сам код скрипта загружается из указанного файла. </p><br>
<p>Есть еще два способа, которые редко упоминаются в литературе, и используются очень ограниченно (поэтому я называл два способа, а не четыре &mdash; именно первыми двумя способами мы в основном будем пользоваться). </p><br>
<p>Один из них &mdash; это написание скрипта в параметре обработчика события какого-либо HTML элемента (например, <span class="T1">onLoad</span> у элемента <span class="T1">&lt;body&gt;</span>) &mdash; обычно используется исключительно для привязки события к скрипту, уже подключенного любым из предыдущих способов.</p><br>

<p>Второй &mdash; это размещение скрипта прямо в строке браузера (т.е. В строке, в которой вводится адрес сайта, можно написать «<span class="T1">javascript:alert('Этотоже Js');</span>», и такой код будет работать.</p><br>
<p>Но подобная практика, как я уже говорил, используется очень редко, только в отдельных немногочисленных случаях. </p><br>

<a name="0"></a>
<h5>Типы и значения в JS</h5>

<p>Вернемся к нашим <span class="T1">alert</span>'ам. То есть, к строке <span class="T1">alert("Здесь был JavaScript");</span></p><br>

<p>Как вы думаете, что будет , если написать <span class="T1">alert(123.45);</span> ? </p><br>
<p>Правильно, браузер выведет окошко с текстом «<span class="T1">123.45</span>». </p><br>

<p>То, что мы передавали в функцию, принято называть значениями. </p><br>
<p>И «<span class="T1">"Здесь был JavaScript"</span>», и «<span class="T1">123.45</span>», и «<span class="T1">true</span>» &mdash; все это значения. Имеются в виду строки, числа, логические константы, массивы &mdash; все, чем может оперировать JavaScript. Каждое значение имеет свой, четко определенный тип.</p><br>

<p>Так, «<span class="T1">"Здесь был JavaScript"</span>» &mdash; это строка. «<span class="T1">123.45</span>» &mdash; число с плавающей точкой. «<span class="T1">true</span>» &mdash; логическое значение.  </p><br>
<p>В целом <span class="T1">Javascript</span>  умеет обращаться с 5 примитивными типами (их иногда называют простыми), а также с объектами, массивами и функциями.</p><br>

<p>Вот простые типы: </p><br>
<p><span class="T1">Number</span> (Числа), <span class="T1">Boolean</span> (логические значения), <span class="T1">String</span> (строки), <span class="T1">null</span> (это специальный тип &mdash; «ничто») и <span class="T1">undefined</span> (еще более специальный тип &mdash; «неопределенность», но о нем позже).</p><br>

<p>Стоит заметить, что у специальных типов название и значение совпадают. То есть у значения <span class="T1">null</span> тип <span class="T1">null</span>, а у значения <span class="T1">undefined</span> тип <span class="T1">undefined</span>. </p><br>

<p>Я упомянул об объектах и массивах. Да, можно записать целый массив (то есть &mdash; последовательность разных значений) в виде одного значения. Делается это так: </p><br>

<p><span class="T1">[1, "Здесь был JavaScript", true]</span>&mdash; теперь у нас есть массив, содержащий число, строку и логическую константу. И его, как и любое другое значение, можно вывести при помощи функции <span class="T1">alert</span>.</p><br>
<p>Для того чтобы понять, что такое массив, можно представить себе маленькую картотеку с множеством ящиков. Картотека &mdash; такой же предмет, как и ящик (в нашем случае и то, и другое &mdash; значения), но картотека сама по себе содержит внутри множество значений. Каждое из этих значений (ящиков) имеет свой номер, и получить содержимое ящика можно зная этот номер. </p><br>
<p>И, конечно, к картотеке можно добавлять ящики, убирать их, переставлять местами... Массив позволяет делать то же самое со значениями, которые находятся у него внутри. А ведь внутри ящика может быть еще одна, маленькая картотека (внутри которой еще парочка картотек поменьше). Массивы тоже могут содержать внутри себя массивы, а те &mdash; еще одни массивы, и так почти до бесконечности (точнее, до тех пор, пока браузер сможет разбираться со всеми этими массивами). </p><br>

<p>Объекты очень похожи на массивы, с одним отличием &mdash; вместо номеров на «ящиках» используются названия. И, соответственно, объекты пишутся немного по-другому, например, так: <span class="T1">{'a':1, 'b':2}</span></p><br>

<p>Каждое значение, которое входит в объект, называют свойством (то есть у объекта из примера будут два свойства с именами «a» и «b», и значениями 1 и 2). </p><br>
<p>У массивов же номера значений, которые в него входят, называются индексами, а сами значения &mdash; элементами. </p><br>

<p>Когда я говорю «пишутся», я имею ввиду способ, которым различные значения записываются в тексте скрипта. Тот текст, которым записывается значение, называется литералом. </p><br>
<p>Не нужно путать значение и литерал. Так, строка <span class="T1">true</span> (без кавычек) &mdash; это литерал, а логическое значение «Истина» &mdash; это и есть значение данного литерала.</p><br>

<p>Для того, чтобы браузер мог отличить одни типы от других, каждый тип записывается определенным образом. </p><br>
<p>Эти способы я уже показывал &mdash; для записи чисел могут использоваться цифры, десятичная точка и показатель экспоненты (то есть число <span class="T1">1000000</span> можно записать как <span class="T1">1.0e6</span>). Кроме этого, можно использовать не десятичную, а, например, шестнадцатеричную запись &mdash; тогда число <span class="T1">12</span>, к примеру, будет записано как <span class="T1">0x0C</span></p><br>
<p>Логические значения записываются строчками <span class="T1">true</span> и <span class="T1">false</span>, без кавычек.</p><br>

<p>Текст внутри кавычек образует строковый литерал &mdash; то есть считается значением типа «строка». </p><br>
<p>Массивы записываются с использованием квадратных скобок, а объекты &mdash; фигурных. </p><br>

<p>Теперь вы понимаете, почему строка <span class="T1">"Здесь был JavaScript"</span>, которую выводил <span class="T1">alert</span>, была записана в кавычках, а число &mdash; без них.</p><br>


<a name="1"></a>
<h5>Переменная в <span class="T1">JavaScript</span></h5>

<p>Само по себе значение, конечно, вещь полезная, но в реальном мире значение само по себе редко существует. Чаще всего оно где-то записано. </p><br>
<p>Возьмем, к примеру, обычную записную книжку. В ней множество страниц, и на каждой что-то записано. Записи на каждой странице можно изменять &mdash; например, попросить записную книжку у друга и переписать телефонный номер девушки, с которой вы вчера познакомились, или вычеркнуть из своей книжки номер этой девушки (после того как познакомились с ее парнем).  </p><br>
<p>Или, к примеру, школьная доска &mdash; на ней можно писать что угодно, стирать, переписывать на нее текст из учебника, а потом с нее &mdash; в тетрадь.  </p><br>

<p>Для того, чтобы хранить значения, а также обмениваться ими, в языке <span class="T1">JavaScript</span> есть переменные.</p><br>

<p>Суть переменной проста &mdash; это такая сущность, которая может содержать какое-либо значение. Самое главное, что значение можно туда заносить и просматривать, какое значение там находится. </p><br>

<p>Для того чтобы использовать переменную, нужно написать ее имя. Имя переменной в <span class="T1">JavaScript</span> может состоять из букв (латинских), цифр, знака подчеркивания и знака доллара (при этом цифра не может быть первым символом). </p><br>

<p>Например, такие строки, как <span class="T1">qwerty</span>, <span class="T1">$_</span>, <span class="T1">a1b2c3$$</span> могут быть именами переменных в JS, а <span class="T1">123a</span> &mdash; нет. При этом нужно учитывать, что регистр знаков важен &mdash; то есть </p><br>
<p><span class="T1">abcd</span> и <span class="T1">aBcD</span> будут разными переменными.</p><br>

<p>Последние версии <span class="T1">JavaScript</span> позволяют использовать любые национальные символы (русский, шведский, тибетский и так далее алфавиты), но для этого они должны быть записаны в <span class="T1">Unicode</span>.</p><br>

<p>Перед тем как переменную использовать, ее нужно объявить (то есть сказать браузеру, что такая переменная будет использоваться). </p><br>
<p>Делается это при помощи специального слова <span class="T1">var</span>:</p><br>
<pre>
	var x, y, z = 3; 

</pre>
<p>В этом примере мы объявили три переменные &mdash; <span class="T1">x</span>, <span class="T1">у</span> и <span class="T1">z</span>, причем переменная <span class="T1">z</span> сразу получила значение <span class="T1">3</span>.</p><br>
<p>Можно также просто присвоить значение переменной &mdash; в этом случае переменная тоже будет считаться объявленной. </p><br>

<p>Использование же необъявленной переменной может вызвать сообщение об ошибке. </p><br>

<p>Существуют и переменные, которые объявлять не нужно &mdash; это так называемые предопределенные переменные (о которых браузер знает с момента запуска). Любой браузер знает о таких переменных, как <span class="T1">window</span>, <span class="T1">document</span>, <span class="T1">location</span>, <span class="T1">navigator</span> и множестве других. </p><br>

<p>Бывает и так, что переменная уже объявлена, но в нее ничего не занесли? В том примере объявления переменных, который я показал, значение занесено только в переменную <span class="T1">z</span>. А что находится в <span class="T1">x</span> и <span class="T1">y</span>?</p><br>

<p>Правильно, значение переменной не определено. Именно для этого и служит «очень специальный» тип <span class="T1">undefined</span>. Все не определенные переменные имеют этот тип и содержат это значение.</p><br>


<p>Для закрепления прочитанного вами, предлагаю несколько вопросов, которые будут пищей для размышлений перед тем, как вы перейдете к следующей части. </p><br>

<ol>
<li><p>Можно ли создать массив объектов? А объект, содержащий массивы? </p><br></li>
<li><p>Какого типа будет литерал <span class="T1">12</span>, если записать его в кавычках?</p><br></li>
<li><p>Работа с каким типом не была описана в этой главе? Как вы думаете, почему? </p><br></li>
</ol>

<a name="2"></a>
<h5>Операции - арифметические, логические</h5>

<p>Переменные обычно как-то взаимодействуют друг с другом. Можно взять значение одной переменной, прибавить ее к значению другой, а потом проверить, что получилось. Такие действия называются операциями, а конструкции языка, которыми операции записываются &mdash; операторами.  </p><br>

<p>Самая простая, и самая главная операция &mdash; присваивание. В <span class="T1">Javascript</span> эта операция записывается оператором «<span class="T1">=</span>». Например,</p><br>
<pre>
	var a, b; 
	a = 1; 
	b = a; 
</pre>
<p>Здесь мы объявили две переменные, после этого занесли в переменную <span class="T1">a</span> значение <span class="T1">1</span>, а после этого занесли в переменную <span class="T1">b</span> то же, что находилось на этот момент в <span class="T1">a</span>.</p><br>

<p>Нужно заметить, что значение из переменной <span class="T1">a</span> никуда не исчезло. </p><br>

<p>При этом, как вы видите, тип переменной нигде не указывается &mdash; он определяется по типу того значения, которое в переменную занесено. Это называется динамической типизацией &mdash; в противовес статической, при которой тип переменной должен указываться при ее объявлении. </p><br>


<p>Язык <span class="T1">JavaScript</span> позволяет выполнять множество операций. Привычные всем сложение, вычитание, умножение, и немного непривычный остаток от деления (или деление по модулю), а также логические &mdash; <span class="T1">AND</span>, <span class="T1">OR</span>, <span class="T1">NOT</span>, операции сдвигов, сравнения... Все эти операции можно свести в небольшую табличку:</p><br>


<div align="center">
<table border="1" cellspacing="0" cellpadding="2" bordercolor="#808080">
<tr><td><span class="T8">. [] ()</span></td></tr>
<tr><td><span class="T8">++ -- - ~ ! delete new typeof void</span></td></tr>
<tr><td><span class="T8">* / %</span></td></tr>
<tr><td><span class="T8">+ -</span></td></tr>
<tr><td><span class="T8">&lt;&lt; &gt;&gt; &gt;&gt;&gt;</span></td></tr>
<tr><td><span class="T8">&lt; &lt;= &gt; &gt;= instanceof</span></td></tr>

<tr><td><span class="T8">== != === !==</span></td></tr>
<tr><td><span class="T8">&amp;</span></td></tr>
<tr><td><span class="T8">^</span></td></tr>
<tr><td><span class="T8">|</span></td></tr>
<tr><td><span class="T8">&amp;&amp;</span></td></tr>
<tr><td><span class="T8">||</span></td></tr>
<tr><td><span class="T8">?:</span></td></tr>
<tr><td><span class="T8">= += -= *= /= %= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;= &amp;= ^= |=</span></td></tr>

<tr><td><span class="T8">,</span></td></tr></table>
</div>

<p>В этой таблице представлены все операторы для всех операций, которые может выполнять <span class="T1">JavaScript</span>, причем те операции, которые в таблице находятся выше, будут выполняться раньше.</p><br>
<p>Все операции делятся на несколько групп: </p><br>
<ul><li><p>Операции сравнения. Записываются операторами <span class="T1">&lt;</span>, <span class="T1">&gt;</span>, <span class="T1">&lt;=</span>, <span class="T1">&gt;=</span>, <span class="T1">==</span>, <span class="T1">!=</span>, <span class="T1">===</span>, <span class="T1">!==</span></p><br>

<p>В отличие от привычной математической записи, для сравнения используется операция <span class="T1">==</span>, так как использование простого знака равенства может ввести в заблуждение браузер (эта операция будет воспринята как присваивание).</p><br>
<p>Также, операция неравенства записывается как <span class="T1">!=</span> (а не как &lt;&gt;).</p><br>
<p>Еще две операции &mdash; равенство и неравенство, но с учетом типа переменной (или тождественное равенство и неравенство) &mdash; так, например, значения <span class="T1">3</span> и <span class="T1">"3"</span> будут равны, поскольку содержат одно и то же число, но не тождественны, потому что их типы разные (первое &mdash; целое число, второе &mdash; строка).</p><br>

</li></ul>

<ul><li><p>Арифметические операции. Это операции <span class="T1">+</span>, <span class="T1">-</span>, <span class="T1">*</span>, <span class="T1">/</span>, <span class="T1">%</span>, <span class="T1">++</span>, <span class="T1">--</span> и унарный минус.</p><br>

<p>Операция <span class="T1">%</span> возвращает остаток от целочисленного деления. Унарные операции <span class="T1">++</span> и <span class="T1">--</span>соответственно увеличивают или уменьшают значение переменной (эти операции требуют всего одну переменную). Унарный минус меняет знак числа на противоположный.</p><br>
</li></ul>

<ul><li><p>Битовые операции. Так как практически вся вычислительная техника построена на двоичной системе счисления, то большинство языков имеет возможность работать с битовым, двоичным представлением числа. В <span class="T1">Javascript</span> для этого есть операции <span class="T1">AN</span>D (<span class="T1">&amp;</span>), <span class="T1">OR</span> (<span class="T1">|</span>), <span class="T1">XOR</span> (<span class="T1">^</span>), а также <span class="T1">NOT</span> (<span class="T1">~</span>). Кроме этого, есть операции побитового сдвига  <span class="T1">&gt;&gt;</span>, <span class="T1">&lt;&lt;</span> и <span class="T1">&gt;&gt;&gt;</span> </p><br></li></ul>

<ul><li><p>Логические операции. Эти операции воспринимают переменную как логическое значение, в отличие от битовых, которые с каждым битом работают отдельно. В <span class="T1">Javascript</span> есть операции <span class="T1">AND</span> (<span class="T1">&amp;&amp;</span>), <span class="T1">OR</span> (<span class="T1">||</span>) и <span class="T1">NOT</span> (<span class="T1">!</span>). В результате выполнения этих операций получается логическое <span class="T1">true</span> или <span class="T1">false</span>.</p><br></li></ul>

<ul><li><p>Строковые операции. Это всего одна операция &mdash; «<span class="T1">+</span>». В результате ее выполнения две строки объединяются в одну.</p><br></li></ul>
<ul><li><p>Операции присваивания. Это уже рассмотренная операция <span class="T1">=</span>, и операции, полученные комбинацией = и других операций. Например, <span class="T1">+=</span> : если мы запишем, например, <span class="T1">a += 1</span>, то это будет значить то же самое что и <span class="T1">a = a + 1</span>.</p><br></li></ul>


<p>Также есть несколько специальных операций, которые я буду рассматривать позднее и пояснять их работу в процессе появления. </p><br>


<p>Каждая операция получает один, два или три операнда (это могут быть как литералы, так и переменные), а в результате своего действия отдает значение. Так, операция <span class="T1">1+2</span> отдаст значение <span class="T1">3</span>, которое может быть записано в переменную:</p><br>
<pre>
	a = 1 + 2;
</pre>

<p>(теперь в a находится значение <span class="T1">3</span>).</p><br>
<p>При желании, результат операции можно никуда не записывать &mdash; например,  </p><br>
<pre>
	2 + 3;
</pre>
<p>(результат операции &mdash; число «5», но этот результат нигде не сохранен). </p><br>

<p>Операция присваивания не является исключением, и тоже возвращает значение. </p><br>
<p>Например, можно записать: </p><br>
<pre>
	a = 1;  
	d = 1 + c = 2 + b = 3 + a;
</pre>

<p>Эта странная, на первый взгляд, запись, тем не менее нормально выполняется. </p><br>

<p>Но, для сохранения вашего спокойствия (не очень-то легко читать такой код) я бы советовал воздержаться от подобной записи. Вместо нее лучше писать </p><br>
<pre>
	a = 1; 
	b = 3 + a; 
	c = 2 + b; 
	d = 1 + c; 

</pre>

<p>Просто и понятно. </p><br>


<p>Иногда бывает так, что операция применяется к двум значениям, или иначе &mdash; операндам разного типа. Например, кто-нибудь может попытаться написать  </p><br>
<pre>
	var a = "13" - 1;
</pre>
<p>В таком случае <span class="T1">JavaScript</span> делает то, что называется «приведением типов», если, конечно, это возможно. То есть, у операндов (обычно одного) меняется тип, при возможности &mdash; сохраняя значение, и после замены типа выполняется операция над двумя операндами теперь уже одного типа.</p><br>

<p>Подобные приведения очень часто ставят в тупик начинающих программистов &mdash; потому что поведение скрипта становится непонятным. </p><br>
<p>Вот, к примеру, две инструкции: </p><br>
<ol>
<li><p><span class="T1">var a = "13" - 1; </span></p><br></li>
<li><p><span class="T1">var a = "13" + 1; </span></p><br></li>
</ol>
<p>Первая инструкция занесет в переменную a число «12», а вторая &mdash; строку «131» </p><br>
<p>Это происходит потому что для строк (а первый операнд &mdash; строка) нет операции вычитания. Поэтому при вычитании строка преобразуется в число, и результат будет  результатом вычитания числа из числа.</p><br>

<p>В случае же сложения используется операция объединения строк, при этом второй операнд преобразуется также в строку.  </p><br>
<p>Есть еще один интересный пример &mdash;  </p><br>
<pre>
	var a = true + false; 
</pre>
<p>Хотя в этом примере оба операнда &mdash; логические, но для них операции сложения не существуют. Поэтому оба операнда преобразуются в числа, и после этого складываются, поэтому результатом будет единица (так как <span class="T1">true</span> преобразуется к единице, а <span class="T1">false</span> &mdash; к нулю).</p><br>


<p>В случае, если среда <span class="T1">JavaScript</span> не может выполнить приведение типов, она выдает ошибку.</p><br>

<a name="3"></a>
<h5>Инструкции</h5>

<p>Любая программа, и программа на <span class="T1">Javascript</span> &mdash; не исключение, состоит из списка команд, которые выполняются друг за другом. Обычно это операции над переменными и вызовы функций. Но чаще всего последовательное выполнение каждой команды &mdash; не совсем то, что требуется от программы. Одно из полезнейших свойств программ &mdash; способность выполнять различные действия в зависимости от состояния переменных. </p><br>

<p>Если учесть, что значения переменных не появляются из ниоткуда, а чаще всего поступают  в программу извне, это свойство становится незаменимым.</p><br>

<p>Для того чтобы программа работала по-разному в разных условиях, существуют инструкции. </p><br>
<p>Самые употребляемые инструкции &mdash; это инструкции циклов и условные инструкции. </p><br>
<p>Первые позволяют выполнять какое-либо действие до тех пор, пока некоторое условие верно (то есть, равно <span class="T1">true</span>). Вторые позволяют, в зависимости от условия, выполнять различные части кода.</p><br>
<p>Также имеются инструкции для работы с объектами (например, обхода всех элементов объекта), инструкции для исключений и блочная инструкция. </p><br>

<p>Для начала, рассмотрим блочную инструкцию, или блок. </p><br>

<p>Она записывается при помощи двух фигурных скобок: <span class="T1">{ }</span> (не стоит путать эту запись с литералом объекта). </p><br>
<p>Благодаря этой инструкции любая последовательность команд, операций и инструкций может выполняться как одна команда &mdash; это очень полезно при использовании остальных инструкций. </p><br>

<p>Для циклических действий в языке <span class="T1">JavaScript</span> существуют, во-первых, операторы циклов &mdash; это операции <span class="T1">for</span>, <span class="T1">while</span> и <span class="T1">do .. while</span>.</p><br>

<p>Оператор for записывается таким образом: </p><br>
<p><span class="T1">for (выражение инициализации; условие; выражение итерации) тело цикла; </span></p><br>
<p>Выражение инициализации &mdash; это выражение, которое вычисляется перед началом выполнения тела цикла (вы помните, что операция присвоения тоже вычисляется).  </p><br>
<p>Обычно в этом месте объявляется переменная-счетчик.  </p><br>
<p>Условие &mdash; логическое выражение. Цикл выполняется до тех пор, пока это условие истинно. </p><br>
<p>Выражение итерации вычисляется каждый раз после очередного выполнения тела цикла. </p><br>
<p>Тело цикла &mdash; одна (и только одна) инструкция. Для того чтобы в теле цикла можно было использовать несколько инструкций, и используется блок.  </p><br>

<p>Считается хорошим тоном использовать блочную инструкцию даже в тех случаях, когда тело цикла состоит всего из одной команды. </p><br>

<p>Например, объявим цикл, который выполняется 30 раз: </p><br>
<pre>
	for (var i = 0; i &lt; 30; i++) {} 
</pre>
<p>Перед стартом цикла мы объявляем переменную <span class="T1">i</span> и присваиваем ей ноль.</p><br>
<p>Перед каждой итерацией проверяем условие &mdash; <span class="T1">i</span> должно быть меньше тридцати.</p><br>

<p>И после каждой итерации увеличиваем значение <span class="T1">i</span> на единицу.</p><br>
<p>Таким образом, переменная <span class="T1">i</span> последовательно принимает значения от <span class="T1">0</span> до <span class="T1">29</span> (как только в переменной <span class="T1">i</span> будет число 30, выполнение цикла прекратится).</p><br>

<p>В случае, если условия или выражения не нужны, их можно не записывать. </p><br>
<p>Например,  </p><br>
<pre>
	for (;;){} 
</pre>
<p>Этот цикл будет выполняться «вечно» (то есть до тех пор, пока не произойдет внешнее событие, которое принудительно остановит цикл &mdash; например, пользователь закроет браузер). </p><br>

<p>Инструкция <span class="T1">while</span> в некотором роде может рассматриваться как упрощенный цикл. Эта инструкция имеет только параметр условия.</p><br>

<p>То есть, инструкция  </p><br>
<pre>
	while (someExpression) {} 
</pre>
<p>полностью аналогична </p><br>
<pre>
	for (; someExpression;) {} 
</pre>

<p>Оба этих цикла называются циклами с предусловием &mdash; то есть условие проверяется до того, как выполняется тело цикла. Если условие ложно до первого выполнения цикла, тело цикла никогда не выполнится </p><br>

<pre>
	for (; false; ) { 
		alert ('Это сообщение никогда не выводится');
	} 
	alert ('A это &mdash; выведется'); 
</pre>

<p>Для того чтобы тело цикла выполнилось хотя бы один раз, существует специальный цикл (модификация <span class="T1">while</span>) &mdash; цикл с постусловием. В таком цикле условие проверяется уже после выполнения тела, и, независимо от того, истинное оно или ложное, тело выполнится как минимум один раз.</p><br>
<p>Например, </p><br>
<pre>
	do { 
		alert ('Всего один раз!');
	} while (false); 

</pre>



<p>Кроме описанных инструкций, циклические вычисления можно производить при помощи инструкции обхода объекта. </p><br>
<p>Записывается она в виде </p><br>
<pre>
	for (variable in object) инструкция; 
</pre>
<p>Например,  </p><br>
<pre>
	var a = {'a':10, 'b':20, 'c':30}; 
	for (var index in a) { 
		alert ('Просматриваем индекс ' + index);
	} 

</pre>

<p>В результате выполнения этих команд браузер выведет три окна сообщений, в каждом из которых будет указываться имя очередного свойства объекта. </p><br>



<p>Условные инструкции служат для того, чтобы, в зависимости от условий, выполнять одно или другое действие. </p><br>
<p>Таких выражений два &mdash; <span class="T1">if</span> и <span class="T1">switch</span>.</p><br>


<p>Выражение if записывается в виде </p><br>
<pre>
	if (условие) { 
		инструкция если значение верно
	} else { 
		инструкция если значение ложно
	}
</pre>
<p>Обе инструкция (для верного и ложного значений условия) называются ветками условия. </p><br>
<p>В некоторых случаях ветка <span class="T1">else</span> просто не используется, тогда оператор принимает такой вид:</p><br>
<pre>
	if (условие) { 
		инструкция если значение верно
	} 

</pre>

<p>Для того, чтобы проверить несколько условий, можно каскадировать (то есть поставить друг за другом) инструкции if: </p><br>
<pre>
	if (выражение 1) { 
	} else if (выражение 2) { 
	} else if (выражение 3) { 
	... 
	}else if (выражение n) { 
	} 
</pre>

<p>Для случая когда нужно использовать выбор из нескольких вариантов такое каскадирование получается громоздким. Вместо него можно использовать инструкцию <span class="T1">switch</span>. Она записывается так:</p><br>
<pre>
	switch(выражение) { 
		case значение1: инструкция1;
		case значение2: инструкция2;
		default: инструкция;
	} 
</pre>

<p>При выполнении этой инструкции будет выполняться тот блок кода, который стоит после case со значением, равным выражению. </p><br>
<p>Если же ни одно из значений не подходит, то выполняется блок после <span class="T1">default</span> (если он есть). Очень часто блок <span class="T1">default</span> не используется.</p><br>


<p>Впрочем, эта инструкция хранит в себе подводные камни. А именно &mdash; после того, как <span class="T1">switch</span> начнет выполнение тех инструкций, которые находятся после <span class="T1">case</span> с соответствующим значением, выполнение продолжится до конца инструкции <span class="T1">switch</span>.</p><br>

<p>Например, код  </p><br>
<pre>
	var a = 1, b; 
	switch (a) { 
		case 1: b = 1;
		case 2: b = 2;
		default: b = 0;
	} 
	alert(b); 
</pre>

<p>выведет окно с текстом «0». </p><br>
<p>Для того чтобы в <span class="T1">b</span> содержалось правильное значение, нужно после каждого присваивания писать инструкцию <span class="T1">break</span>:</p><br>

<pre>
	var a = 1, b; 
	switch (a) {
		case 1: b = 1;
			break;
		case 2: b = 2;
			break;
		default: b = 0;
		} 
	alert(b); 
</pre>

<p>Теперь в переменной <span class="T1">b</span> будет именно то значение, которое мы ожидали.</p><br>


<p>Раз уж пошел разговор про инструкцию <span class="T1">break</span>, стоит упомянуть об инструкциях этого типа (вы уже устали читать на каждой строчке слов «инструкция»? Потерпите немного, скоро они закончатся).</p><br>

<p>Это инструкции прерывания и продолжения циклов. </p><br>
<p>Инструкция <span class="T1">break</span> используется для того, чтобы завершить выполнение инструкции <span class="T1">switch</span>, и для прерывания циклов. Чаще всего это прерывание совершается по условию &mdash; к примеру, бесконечный цикл может завершаться при достижении переменной определенного значения (теперь вы понимаете, зачем могут понадобиться бесконечные циклы).</p><br>
<p>Например, </p><br>
<pre>
	var a = 2; 
	while (true) { 
		a+=32;
		a %= 123;
		if (a == 0) {
			break;
		}
	} 
</pre>

<p>В этом случае мы не знаем точно, сколько раз нужно выполниться циклу, но у нас есть четкое условие. Именно при достижении этого условия цикл завершится. </p><br>

<p>Инструкция <span class="T1">continue</span> похожа на <span class="T1">break</span> с той разницей, что <span class="T1">break</span> завершает выполнение цикла (причем все что находится в теле цикла ниже инструкции <span class="T1">break</span> не выполняется), а continue просто начинает новую итерацию цикла &mdash; как бы пропускает все операции идущие ниже, как будто их нет.</p><br>

<p>Есть еще одна инструкция &mdash; это так называемая пустая инструкция. </p><br>
<p>Записывается она в виде обычной точки с запятой &mdash; «<span class="T1">;</span>». Такая инструкция используется там, где ничего выполнять не нужно. </p><br>

<p>Кроме того, этим же символом одна инструкция (или выражение) отделяется от другого. Например, можно писать </p><br>
<pre>
	var a = 1 
	a = a + 1 
	a = a + 2 

</pre>

<p>А можно писать  </p><br>
<pre>
	var a = 1; a = a + 1; a = a + 2; 
</pre>

<p>То есть команды разделяются или переводом строки, или точкой с запятой. </p><br>
<p>Чаще всего используются оба метода одновременно: </p><br>
<pre>
	var a = 1; 
	a = a + 1; 
	a = a + 2; 
</pre>

<br><br><hr><br><br><center>

<br><a class="a1" href="#33333">Наверх</a><br>
<br>
</td>
</tr>
</table>
	                  
        </body>     
  
</html>
