<html>
<title>Система дистанционного обучения кафедры </title>
<head bodycolor="000011">
 <link rel="stylesheet" type="text/css" href="../../css/style.css">
 <link rel="stylesheet" type="text/css" href="../../css/abc.css">
        <body BACKGROUND="../../image/background.PNG">
		<br><br>
		<?php
include "../../common/verch.php";
                                   
?>
<a name="33333"></a>
<h1 style="margin-bottom: 10px; color: #445C4C">Лекции по теме: JavaScript<h1>
<table align="center" cellspacing="0" cellpadding="0" border="0">
	<tr>
		<td colspan="2" align="center">
			<ul class="tab">
			<li><a href="java1.php"><span>Лекция № 1</span></a></li>
			<li><a href="java2.php"><span>Лекция № 2</span></a></li>
			<li><a href="java3.php"><span>Лекция № 3</span></a></li>
			<li><a href="java4.php"><span>Лекция № 4</span></a></li>
		</td>
	</tr>
</table>


<table align="justify" width="900" cellspacing="2" cellpadding="2" border="0" bgcolor="white">
<tr>
<td colspan="2" align="center"><br>

<strong><h2>Лекция № 4</h2> </strong><br><br><hr><br><br>


<p> <div align="left" align="justify">&nbsp;&nbsp;&nbsp;&nbsp;

<center>
<p><a class="a1" href="#1">Объекты Navigator, Window, Images, Forms</a></p><br>
<p><a class="a1" href="#2">Вложенность документов. Children у документа</a></p><br></center>
<br>

<a name="1"></a><br>
<h5>Объекты navigator, window, images, forms</h5><br>
<p>Модель классов браузера, позволяющая программам на языке JavaScript взаимодействовать с документом и браузером в целом, базируется на объекте <span class="T1">window</span>. Все последующие модели взаимодействия так или иначе используют уже реализованные классы.</p>
<p>Фактически, объект <span class="T1">window</span> является отображением окна браузера в скрипте. Он содержит в себе объект информации о браузере (<span class="T1">navigator</span>), объект «экрана» (то есть визуального отображения) <span class="T1">screen</span>, фреймы, если таковые есть, собственно HTML документ (а куда же без него?), а также связан с историей переходов, панелями меню и так далее... В общем, большая часть того, что есть в браузере, есть также и в этом объекте.</p>
<br>
<p>Единственное неудобство – каждый браузер содержит немного различные свойства объекта окна, так что не всегда можно быть уверенным, что свойство или функция поддерживается. Как пример можно взять проверку полноэкранного режима отображения при помощи свойства <span class="T1">window.fullscreen</span>  (в Mozilla Firefox это можно сделать, а в IE и Opera – нельзя). Кроме того, нужно быть осторожным с определением глобальных функций и переменных. Переопределить функцию, если существует другая функция с таким же именем, нельзя, а переопределение переменной (или что еще хуже – использование необъявленной переменной) может привести к непредсказуемым результатам.</p><br>
<p>Если объект <span class="T1">window</span> связан с окном (или вкладкой) браузера, то объект <span class="T1">navigator</span> связан со всем браузером целиком. Именно этот объект используется для определения типа браузера, а также операционной системы. Кроме этого, при помощи объекта <span class="T1">navigator</span> можно определить операционную систему, язык выбранный в браузере по умолчанию и список mime-типов и установленных плагинов. </p>
<p>Объект <span class="T1">screen</span> тоже является «составной частью» окна и, в свою очередь, связан с областью  показа страницы (то есть той частью окна, в которой и показывается уже отрисованная страница, не включая скроллинг). Благодаря этому объекту можно получать экранное разрешение, суммарный размер страницы и положение скроллеров (то есть, например, можно отслеживать, прокрутил ли пользователь страницу до самого низа или огранизовать скроллинг меню к определенной точке экрана в процессе прокрутки). Кроме того, этот же объект используется почти всеми счетчиками посещений для того чтобы определить разрешение экрана и глубину цвета.</p>
<br>
<p>Объекты <span class="T1">images</span>, <span class="T1">forms</span>, а кроме них – объекты <span class="T1">links</span>, <span class="T1">anchors</span>, <span class="T1">embeds</span> и <span class="T1">applets</span> использовались (и могут использоваться по нынешнее время) доступа к элементам документа. О некоторых из этих объектов пойдет речь ниже, о других – в следующих главах.</p>

<a name="2"></a><br>
<h5>Вложенность документов. Children у документа.</h5><br>
<p>Говоря о вложенности, сразу предупрежу – рассматриваться будут как коллекции объектов (формы, картинки и прочее), так и загружаемые объекты (скрипты, картинки и стили). Первые – потому что они представляют собой альтернативные способы доступа к элементам, то есть реализуют дочерние элементы документа. </p>
<p>Вторые – потому что более подходящего места не нашлось (а где еще можно описывать «вложенные документы», как не во вложенности документов?), и потому что они тоже в определенной степени являются потомками документа. </p>
<p>Итак, первое – коллекции элементов. </p>
<p>Как вы уже знаете, к любому элементу можно обратиться при помощи ссылок внутри дерева элементов, а также при помощи функций поиска элементов. </p>
<p>Но описываемый способ немного отличается. </p>
<p>Любой браузер по соображениям совместимости несет в себе наследие предков, то есть – браузеров меньшей версии. </p>
<p>Этим наследием являются объекты <span class="T1">document.forms</span>, <span class="T1">document.images</span>, <span class="T1">document.links</span>, <span class="T1">document.embeds</span> и <span class="T1">document.applets</span>.</p>
&nbsp;<br>
<p>Если последние два из них используются очень редко – вряд ли увидишь в наше время страницу со внедренными Java (без script) апплетами, а из внедренных документов используются в лучшем случае Flash-анимации, то первые три весьма и весьма востребованы. </p>
<p>Эти объекты содержат в себе коллекции (или, иначе, массивы) форм (это, как вы поняли, <span class="T1">document.forms</span>), картинок и ссылок текущего HTML-документа.</p>
<p>По сути, все эти объекты похожи, поэтому я буду рассматривать объект <span class="T1">document.images</span> как пример всех остальных объектов.</p>
<p>Объект <span class="T1">document.images</span> представляет из себя массив. То есть каждый элемент этого объекта – ссылка на картинку (причем – только заданную тегом <span class="T1">img</span>, в то время еще никто не слышал про стили и использование свойства <span class="T1">background</span>).</p>

<p>Неважно, в каком месте документа находится эта картинка – она обязательно попадет в массив <span class="T1">document.images</span></p>
<p>Для каждой картинки можно менять адрес исходного файла простым изменением свойства <span class="T1">src</span> картинки, а также изменять <span class="T1">width</span> и <span class="T1">height</span> (но не во всех браузерах это изменение работает нормально). </p>
<p>Самое приятное свойство этого массива – он в какой-то степени заменяет функцию <span class="T1">getElementByTagName</span>, которая была введена только в самых новых браузерах, правда, только для тега <span class="T1">img</span>.</p>
<br>
<p>Объект <span class="T1">document.images</span> используется для множества вещей. Например, с его помощью в свое время делались анимации при наведении мыши – дело в том, что при смене адреса исходного файла браузер загружал этот файл (или брал из кэша) и – как следствие – начинал проигрывание gif-анимации при наличии таковой. Да и просто можно было поменять картинку на другую при наведении</p>
<p>Кроме того, этот же объект позволял сделать «предварительную загрузку» изображений. Если вы не знаете, зачем это нужно было – прочтите еще раз предыдущий абзац. </p>
<p>Представьте – все картинки загрузились, вы наводите мышь на кнопку с таким вот эффектом смены картинки, и новая картинка начинает загружаться... и грузится целых полторы секунды, превращаясь на это время в пустой квадратик. Некрасиво, и портит всю красоту. </p>
<p>Конечно, сейчас, с появлением таких техник как CSS-спрайты, этот способ кажется наивным, но в свое время он был очень востребованным (даже сейчас можно поискать скрипты под называнием «image preloader» -- вы будете поражены их количеством). </p>
<p>Объект <span class="T1">document.forms</span> предоставляет доступ к формам, причем в том же виде – это обычный массив ссылок на формы (которые, в свою очередь, содержат массивы <span class="T1">elements</span> – со ссылками на поля ввода этих форм). Нужно сказать, что иерархия форм двухсторонняя – у любого элемента ввода, который находится внутри формы, есть ссылка на <span class="T1">form</span> (тот самый элемент из <span class="T1">document.forms</span>). Большинство функций для работы с формами используют именно этот объект.</p>
<br>
<p>Основным отличием этих объектов является то, что к элементу можно обратиться как по индексу (как в обычном массиве), так и по имени элемента – в том случае, если у элемента задан параметр <span class="T1">name</span>.</p>
<p>А теперь, плавно перейдем от картинок к загружаемым элементам. </p>
<p>Элемент, который загружается из отдельного файла, можно назвать загружаемым. К сожалению,  порядок загрузки файлов точно определить нельзя – большинство браузеров, конечно, загружают и выполняют скрипты в порядке их появления в HTML коде, но стопроцентной гарантии дать нельзя (это не описано в стандартах).</p>
<p>Загружаемые элементы обязательно имеют адрес файла или ресурса, из которого они загружаются – адрес этого «файла» задается или при помощи атрибута <span class="T1">src</span>, или – для тегов <span class="T1">rel</span> – при помощи атрибута <span class="T1">href</span>.</p>
<br>
<p>Если изменить значение этого атрибута, то будет загружено и применено новое содержимое (по крайней мере в Firefox, Opera и Internet Explorer – как это проиcходит в Safari я не знаю, проверить нечем). Таким образом можно загрузить новую картинку, сменить стиль, указать другой адрес у <span class="T1">iframe</span>... </p>
<p>А вот загрузить новый скрипт таким образом нельзя. К сожалению, замена адреса у тега <span class="T1">script</span> не дает таких результатов – новый скрипт не загружается, а старый никуда не девается.</p>
<p>Единственный способ «догрузить» новый скрипт – это создать еще один тег <span class="T1">script</span> с нужным вам адресом.</p>
<p>Да и при создании этого скрипта тоже нужно учитывать одну особенность: если создавать этот тег при помощи <span class="T1">innerHtml</span> другого элемента, то ничего не получится. Тег создастся, а загружен не будет. </p>
<br>
<p>Поэтому тут нужно использовать исключительно <span class="T1">createElement</span>, или, на худой конец, <span class="T1">document.write</span> (что очень не рекомендуется – функция устарела давным давно, и без полного понимания, как она работает, лучше ее не использовать – ну, примерно как и <span class="T1">innerHtml</span>). </p>
<p>Только в этом случае скрипт загрузится. </p>


<br><br><hr><br><br><center>

<br><a class="a1" href="#33333">Наверх</a><br>
<br>
</td>
</tr>
</table>
	                  
        </body>     
  
</html>
